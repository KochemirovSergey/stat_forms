#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Dashboard Server
"""

import requests
import json
import time
from typing import Dict, Any

class DashboardServerTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Dashboard Server"""
    
    def __init__(self, base_url: str = "http://localhost:5001"):
        self.base_url = base_url
        self.test_node_id = "4:2a2ab0e9-9777-41b2-89a4-9d85382603dc:156"
        self.test_year = "2024"
    
    def test_health_check(self) -> bool:
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check...")
            response = requests.get(f"{self.base_url}/health", timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ Health check —É—Å–ø–µ—à–µ–Ω: {data.get('status')}")
                print(f"   - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neo4j: {data.get('neo4j_connection')}")
                print(f"   - –†–∞–∑–º–µ—Ä –∫–µ—à–∞: {data.get('cache_size')}")
                return True
            else:
                print(f"‚ùå Health check –Ω–µ—É—Å–ø–µ—à–µ–Ω: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ health check: {str(e)}")
            return False
    
    def test_main_page(self) -> bool:
        """–¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            response = requests.get(f"{self.base_url}/", timeout=10)
            
            if response.status_code == 200:
                print("‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                print(f"‚ùå –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {str(e)}")
            return False
    
    def test_dashboard_page(self) -> bool:
        """–¢–µ—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–∞—à–±–æ—Ä–¥–∞"""
        try:
            print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è —É–∑–ª–∞ {self.test_node_id}...")
            response = requests.get(
                f"{self.base_url}/dashboard/{self.test_node_id}",
                timeout=30
            )
            
            if response.status_code == 200:
                print("‚úÖ –î–∞—à–±–æ—Ä–¥ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                content = response.text
                if "plotly-graph-div" in content or "chart-container" in content:
                    print("‚úÖ –ì—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –¥–∞—à–±–æ—Ä–¥–µ")
                return True
            else:
                print(f"‚ùå –î–∞—à–±–æ—Ä–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                if response.status_code == 500:
                    print(f"   –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.text[:200]}...")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞: {str(e)}")
            return False
    
    def test_dashboard_with_year(self) -> bool:
        """–¢–µ—Å—Ç –¥–∞—à–±–æ—Ä–¥–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≥–æ–¥–∞"""
        try:
            print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è —É–∑–ª–∞ {self.test_node_id}, –≥–æ–¥ {self.test_year}...")
            response = requests.get(
                f"{self.base_url}/dashboard/{self.test_node_id}/{self.test_year}",
                timeout=30
            )
            
            if response.status_code == 200:
                print("‚úÖ –î–∞—à–±–æ—Ä–¥ —Å –≥–æ–¥–æ–º –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                print(f"‚ùå –î–∞—à–±–æ—Ä–¥ —Å –≥–æ–¥–æ–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞ —Å –≥–æ–¥–æ–º: {str(e)}")
            return False
    
    def test_api_dashboard_data(self) -> bool:
        """–¢–µ—Å—Ç API –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞"""
        try:
            print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞...")
            response = requests.get(
                f"{self.base_url}/api/dashboard/{self.test_node_id}",
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                print("‚úÖ API –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print(f"   - Node ID: {data.get('node_id')}")
                print(f"   - –¢–µ–∫—É—â–∏–π –≥–æ–¥: {data.get('current_year')}")
                print(f"   - –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–¥—ã: {len(data.get('available_years', []))}")
                return True
            else:
                print(f"‚ùå API –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ API –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞: {str(e)}")
            return False
    
    def test_api_map_data(self) -> bool:
        """–¢–µ—Å—Ç API –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã"""
        try:
            print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–∞—Ä—Ç—ã...")
            response = requests.get(
                f"{self.base_url}/api/map/{self.test_node_id}/{self.test_year}",
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                print("‚úÖ API –∫–∞—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print(f"   - Node ID: {data.get('node_id')}")
                print(f"   - –ì–æ–¥: {data.get('year')}")
                print(f"   - HTML –∫–∞—Ä—Ç—ã: {'–î–∞' if data.get('map_html') else '–ù–µ—Ç'}")
                return True
            else:
                print(f"‚ùå API –∫–∞—Ä—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ API –∫–∞—Ä—Ç—ã: {str(e)}")
            return False
    
    def test_api_chart_data(self) -> bool:
        """–¢–µ—Å—Ç API –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞"""
        try:
            print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –≥—Ä–∞—Ñ–∏–∫–∞...")
            response = requests.get(
                f"{self.base_url}/api/chart/{self.test_node_id}",
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                print("‚úÖ API –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print(f"   - Node ID: {data.get('node_id')}")
                print(f"   - HTML –≥—Ä–∞—Ñ–∏–∫–∞: {'–î–∞' if data.get('chart_html') else '–ù–µ—Ç'}")
                return True
            else:
                print(f"‚ùå API –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ API –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")
            return False
    
    def test_api_clear_cache(self) -> bool:
        """–¢–µ—Å—Ç API –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞"""
        try:
            print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞...")
            response = requests.get(f"{self.base_url}/api/clear-cache", timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                print("‚úÖ API –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print(f"   - –°–æ–æ–±—â–µ–Ω–∏–µ: {data.get('message')}")
                return True
            else:
                print(f"‚ùå API –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ API –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞: {str(e)}")
            return False
    
    def test_error_handling(self) -> bool:
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        try:
            print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
            
            # –¢–µ—Å—Ç —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —É–∑–ª–æ–º
            response = requests.get(
                f"{self.base_url}/dashboard/nonexistent-node-id",
                timeout=10
            )
            
            if response.status_code == 500:
                print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 500 –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É–∑–ª–∞)")
                return True
            else:
                print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É–∑–ª–∞: {response.status_code}")
                return True  # –≠—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: {str(e)}")
            return False
    
    def run_all_tests(self) -> Dict[str, bool]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Dashboard Server")
        print("=" * 50)
        
        tests = {
            "Health Check": self.test_health_check,
            "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞": self.test_main_page,
            "–î–∞—à–±–æ—Ä–¥": self.test_dashboard_page,
            "–î–∞—à–±–æ—Ä–¥ —Å –≥–æ–¥–æ–º": self.test_dashboard_with_year,
            "API –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞": self.test_api_dashboard_data,
            "API –∫–∞—Ä—Ç—ã": self.test_api_map_data,
            "API –≥—Ä–∞—Ñ–∏–∫–∞": self.test_api_chart_data,
            "API –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞": self.test_api_clear_cache,
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫": self.test_error_handling
        }
        
        results = {}
        passed = 0
        total = len(tests)
        
        for test_name, test_func in tests.items():
            print(f"\nüìã {test_name}")
            print("-" * 30)
            
            try:
                result = test_func()
                results[test_name] = result
                if result:
                    passed += 1
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {str(e)}")
                results[test_name] = False
            
            time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 50)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("=" * 50)
        
        for test_name, result in results.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"{test_name}: {status}")
        
        print(f"\n–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if passed == total:
            print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        elif passed >= total * 0.8:
            print("‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
        else:
            print("‚ùå –ú–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        
        return results

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("Dashboard Server Tester")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:5001")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    try:
        response = requests.get("http://localhost:5001/health", timeout=5)
        if response.status_code != 200:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return
    except:
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ dashboard_server.py")
        return
    
    tester = DashboardServerTester()
    results = tester.run_all_tests()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    passed_count = sum(1 for result in results.values() if result)
    total_count = len(results)
    
    if passed_count == total_count:
        exit(0)  # –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã
    else:
        exit(1)  # –ï—Å—Ç—å –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã

if __name__ == "__main__":
    main()