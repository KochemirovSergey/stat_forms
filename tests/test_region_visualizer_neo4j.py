#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –º–æ–¥—É–ª—è region_visualizer_neo4j.py
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, str(Path(__file__).parent))

from region_visualizer_neo4j import RegionVisualizerNeo4j

def test_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neo4j"""
    print("=== –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neo4j ===")
    try:
        visualizer = RegionVisualizerNeo4j()
        visualizer.connect()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        visualizer.disconnect()
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
        return False

def test_get_node_info():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —É–∑–ª–µ"""
    print("\n=== –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —É–∑–ª–µ ===")
    test_node_id = "4:2a2ab0e9-9777-41b2-89a4-9d85382603dc:156"
    
    try:
        with RegionVisualizerNeo4j() as visualizer:
            node_info = visualizer.get_node_info(test_node_id)
            
            if node_info:
                print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —É–∑–ª–µ –ø–æ–ª—É—á–µ–Ω–∞:")
                for key, value in node_info.items():
                    print(f"  {key}: {value}")
                return True
            else:
                print("‚ùå –£–∑–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —É–∑–ª–µ: {str(e)}")
        return False

def test_get_regional_data():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\n=== –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ===")
    test_node_id = "4:2a2ab0e9-9777-41b2-89a4-9d85382603dc:156"
    test_year = "2024"
    
    try:
        with RegionVisualizerNeo4j() as visualizer:
            regional_data = visualizer.get_regional_data(test_node_id, test_year)
            
            if regional_data:
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ {len(regional_data)} —Ä–µ–≥–∏–æ–Ω–∞–º –∑–∞ {test_year} –≥–æ–¥:")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ä–µ–≥–∏–æ–Ω–æ–≤
                for i, (region, value) in enumerate(regional_data.items()):
                    if i < 5:
                        print(f"  {region}: {value}")
                    else:
                        print(f"  ... –∏ –µ—â–µ {len(regional_data) - 5} —Ä–µ–≥–∏–æ–Ω–æ–≤")
                        break
                return True
            else:
                print("‚ùå –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return False

def test_create_regional_map():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã"""
    print("\n=== –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã ===")
    test_node_id = "4:2a2ab0e9-9777-41b2-89a4-9d85382603dc:156"
    test_year = "2024"
    
    try:
        with RegionVisualizerNeo4j() as visualizer:
            print(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è —É–∑–ª–∞ {test_node_id}, –≥–æ–¥ {test_year}")
            visualizer.create_regional_map(test_node_id, test_year)
            print("‚úÖ –ö–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã: {str(e)}")
        return False

def test_create_federal_chart():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\n=== –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ===")
    test_node_id = "4:2a2ab0e9-9777-41b2-89a4-9d85382603dc:156"
    
    try:
        with RegionVisualizerNeo4j() as visualizer:
            print(f"–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è —É–∑–ª–∞ {test_node_id}")
            visualizer.create_federal_chart(test_node_id)
            print("‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")
        return False

def test_all_years():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç –¥–ª—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–µ—Ç"""
    print("\n=== –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç –¥–ª—è –≤—Å–µ—Ö –ª–µ—Ç ===")
    test_node_id = "4:2a2ab0e9-9777-41b2-89a4-9d85382603dc:156"
    years = ["2021", "2022", "2023", "2024"]
    
    try:
        with RegionVisualizerNeo4j() as visualizer:
            for year in years:
                print(f"\n–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –∑–∞ {year} –≥–æ–¥...")
                regional_data = visualizer.get_regional_data(test_node_id, year)
                if regional_data:
                    print(f"  –î–∞–Ω–Ω—ã–µ –∑–∞ {year}: {len(regional_data)} —Ä–µ–≥–∏–æ–Ω–æ–≤")
                else:
                    print(f"  –î–∞–Ω–Ω—ã–µ –∑–∞ {year}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            
            print("‚úÖ –¢–µ—Å—Ç –¥–ª—è –≤—Å–µ—Ö –ª–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Å–µ—Ö –ª–µ—Ç: {str(e)}")
        return False

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è RegionVisualizerNeo4j")
    print("=" * 50)
    
    tests = [
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neo4j", test_connection),
        ("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —É–∑–ª–µ", test_get_node_info),
        ("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", test_get_regional_data),
        ("–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã", test_create_regional_map),
        ("–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", test_create_federal_chart),
        ("–¢–µ—Å—Ç –≤—Å–µ—Ö –ª–µ—Ç", test_all_years)
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {str(e)}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status}: {test_name}")
        if result:
            passed += 1
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –¥–∞–Ω–Ω—ã–µ.")

if __name__ == "__main__":
    run_all_tests()