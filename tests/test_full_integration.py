#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª: Telegram –∑–∞–ø—Ä–æ—Å ‚Üí CSV/Tavily ‚Üí Neo4j ‚Üí Dashboard
"""
import asyncio
import sys
import json
import time
import logging
import threading
import subprocess
import requests
from pathlib import Path
from typing import Dict, Any, Optional, List
from unittest.mock import Mock, patch
import tempfile
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('integration_tests.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger('integration_test')

class FullIntegrationTester:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.test_results = {}
        self.passed_tests = 0
        self.total_tests = 0
        self.dashboard_process = None
        self.bot_process = None
        self.test_data = {}
        
    def run_test(self, test_name: str, test_func):
        """–ó–∞–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        self.total_tests += 1
        logger.info(f"üß™ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: {test_name}")
        
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = asyncio.run(test_func())
            else:
                result = test_func()
            
            if result:
                logger.info(f"‚úÖ {test_name}: PASSED")
                self.test_results[test_name] = "PASSED"
                self.passed_tests += 1
            else:
                logger.error(f"‚ùå {test_name}: FAILED")
                self.test_results[test_name] = "FAILED"
                
        except Exception as e:
            logger.error(f"üí• {test_name}: ERROR - {e}")
            self.test_results[test_name] = f"ERROR: {e}"
    
    async def test_system_startup(self) -> bool:
        """–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        try:
            from main import SystemCoordinator
            coordinator = SystemCoordinator()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
            ready = await coordinator.system_health_check()
            if not ready:
                logger.error("–°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É")
                return False
            
            logger.info("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
            return False
    
    def test_neo4j_full_cycle(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞–±–æ—Ç—ã —Å Neo4j"""
        try:
            from tg_bot.neo4j_matcher import Neo4jMatcher
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Ç—á–µ—Ä
            matcher = Neo4jMatcher()
            
            # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            test_query = "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"
            
            # –ò—â–µ–º —É–∑–µ–ª (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
            node_id = matcher.find_matching_schetnoe_node(test_query)
            
            if not node_id:
                logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —É–∑–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
                return True  # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –±–∞–∑–∞ –ø—É—Å—Ç–∞—è
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—á–µ—Ç–Ω—ã–µ —É–∑–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            nodes = matcher._get_schetnoe_nodes()
            
            if nodes:
                logger.info(f"–ù–∞–π–¥–µ–Ω —É–∑–µ–ª {node_id} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{test_query}'")
                logger.info(f"–í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ {len(nodes)} —Å—á–µ—Ç–Ω—ã—Ö —É–∑–ª–æ–≤")
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                self.test_data['neo4j_nodes'] = [{'id': node_id, 'properties': {'name': 'test'}}]
            else:
                logger.info("–ë–∞–∑–∞ —Å—á–µ—Ç–Ω—ã—Ö —É–∑–ª–æ–≤ –ø—É—Å—Ç–∞")
                
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ Neo4j: {e}")
            return False
    
    def test_csv_processing(self) -> bool:
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ CSV —Ñ–∞–π–ª–æ–≤"""
        try:
            from tg_bot.excel_reader import ExcelReader
            from tg_bot.config import TABLES_CSV_PATH_2124, TABLES_CSV_PATH_1620
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ CSV —Ñ–∞–π–ª–æ–≤
            if not Path(TABLES_CSV_PATH_2124).exists():
                logger.warning(f"CSV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {TABLES_CSV_PATH_2124}")
                return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∏—Ç–∞—Ç–µ–ª—å
            reader = ExcelReader()
            
            # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            test_query = "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"
            
            # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CSV
            results_2124 = reader.search_data(test_query, TABLES_CSV_PATH_2124)
            results_1620 = reader.search_data(test_query, TABLES_CSV_PATH_1620)
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ 2021-2024: {len(results_2124) if results_2124 else 0}")
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ 2016-2020: {len(results_1620) if results_1620 else 0}")
            
            self.test_data['csv_results'] = {
                '2124': results_2124,
                '1620': results_1620
            }
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ CSV: {e}")
            return False
    
    def test_tavily_integration(self) -> bool:
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Tavily"""
        try:
            from tg_bot.tavily_search import search_with_tavily
            
            # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            test_query = "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –†–æ—Å—Å–∏–∏ 2024"
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            results = search_with_tavily(test_query)
            
            if results and 'results' in results:
                logger.info(f"Tavily –≤–µ—Ä–Ω—É–ª {len(results['results'])} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                self.test_data['tavily_results'] = results['results'][:2]
                return True
            else:
                logger.warning("Tavily –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ Tavily: {e}")
            return True  # Tavily –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    
    def test_llm_processing(self) -> bool:
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ LLM"""
        try:
            from tg_bot.query_llm import process_query, analyze_combined_results
            from tg_bot.config import TABLES_CSV_PATH_2124
            
            # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            test_query = "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –≤—É–∑–∞—Ö"
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            result = process_query(
                tables_csv_path=TABLES_CSV_PATH_2124,
                start_year="2021",
                end_year="2024",
                user_query=test_query
            )
            
            if result and isinstance(result, dict):
                logger.info("LLM –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
                self.test_data['llm_result'] = result
                return True
            else:
                logger.warning("LLM –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ LLM: {e}")
            return True  # LLM –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    
    def test_dashboard_server_startup(self) -> bool:
        """–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ Dashboard —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            import subprocess
            import time
            import requests
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Dashboard —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
            self.dashboard_process = subprocess.Popen([
                sys.executable, 'dashboard_server.py'
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
            time.sleep(5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
            try:
                response = requests.get('http://localhost:5001/', timeout=10)
                if response.status_code == 200:
                    logger.info("Dashboard —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    return True
                else:
                    logger.error(f"Dashboard —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –∫–æ–¥: {response.status_code}")
                    return False
            except requests.exceptions.RequestException as e:
                logger.error(f"Dashboard —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Dashboard —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False
    
    def test_dashboard_api_endpoints(self) -> bool:
        """–¢–µ—Å—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ Dashboard"""
        try:
            import requests
            
            base_url = 'http://localhost:5001'
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
            endpoints = [
                '/',
                '/api/status'
            ]
            
            for endpoint in endpoints:
                try:
                    response = requests.get(f"{base_url}{endpoint}", timeout=5)
                    if response.status_code not in [200, 404]:  # 404 –¥–æ–ø—É—Å—Ç–∏–º –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
                        logger.error(f"–≠–Ω–¥–ø–æ–∏–Ω—Ç {endpoint} –≤–µ—Ä–Ω—É–ª –∫–æ–¥: {response.status_code}")
                        return False
                    logger.info(f"–≠–Ω–¥–ø–æ–∏–Ω—Ç {endpoint}: OK")
                except requests.exceptions.RequestException as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ {endpoint}: {e}")
                    return False
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤: {e}")
            return False
    
    def test_dashboard_with_node_data(self) -> bool:
        """–¢–µ—Å—Ç Dashboard —Å –¥–∞–Ω–Ω—ã–º–∏ —É–∑–ª–∞"""
        try:
            import requests
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
            if 'neo4j_nodes' not in self.test_data or not self.test_data['neo4j_nodes']:
                logger.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —É–∑–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Dashboard")
                return True
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —É–∑–µ–ª
            test_node = self.test_data['neo4j_nodes'][0]
            node_id = test_node.get('id', 'test_node')
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è —É–∑–ª–∞
            try:
                response = requests.get(f'http://localhost:5001/dashboard/{node_id}', timeout=10)
                if response.status_code in [200, 404]:  # 404 –¥–æ–ø—É—Å—Ç–∏–º, –µ—Å–ª–∏ —É–∑–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
                    logger.info(f"Dashboard –¥–ª—è —É–∑–ª–∞ {node_id}: OK")
                    return True
                else:
                    logger.error(f"Dashboard –¥–ª—è —É–∑–ª–∞ –≤–µ—Ä–Ω—É–ª –∫–æ–¥: {response.status_code}")
                    return False
            except requests.exceptions.RequestException as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ dashboard —É–∑–ª–∞: {e}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ Dashboard —Å –¥–∞–Ω–Ω—ã–º–∏ —É–∑–ª–∞: {e}")
            return False
    
    def test_full_query_cycle(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            from tg_bot.query_llm import process_query
            from tg_bot.neo4j_matcher import Neo4jMatcher
            from tg_bot.excel_reader import ExcelReader
            
            # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            test_query = "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –≤—ã—Å—à–∏—Ö —É—á–µ–±–Ω—ã—Ö –∑–∞–≤–µ–¥–µ–Ω–∏—è—Ö"
            
            logger.info(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{test_query}'")
            
            # 1. –ü–æ–∏—Å–∫ –≤ Neo4j
            matcher = Neo4jMatcher()
            neo4j_node = matcher.find_matching_schetnoe_node(test_query)
            logger.info(f"Neo4j: –Ω–∞–π–¥–µ–Ω —É–∑–µ–ª {neo4j_node if neo4j_node else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}")
            
            # 2. –ü–æ–∏—Å–∫ –≤ CSV (–µ—Å–ª–∏ Neo4j –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
            csv_results = None
            if not neo4j_node:
                reader = ExcelReader()
                from tg_bot.config import TABLES_CSV_PATH_2124
                if Path(TABLES_CSV_PATH_2124).exists():
                    csv_results = reader.search_data(test_query, TABLES_CSV_PATH_2124)
                    logger.info(f"CSV: –Ω–∞–π–¥–µ–Ω–æ {len(csv_results) if csv_results else 0} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            # 3. –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Tavily (–µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV/Neo4j)
            tavily_results = None
            if not neo4j_node and not csv_results:
                from tg_bot.tavily_search import search_with_tavily
                try:
                    tavily_results = search_with_tavily(test_query)
                    logger.info("Tavily: –ø–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                except:
                    logger.info("Tavily: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            has_results = bool(neo4j_node or csv_results or tavily_results)
            
            if has_results:
                logger.info("‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
            else:
                logger.info("‚ö†Ô∏è –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã)")
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: {e}")
            return False
    
    def test_error_handling(self) -> bool:
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        try:
            from tg_bot.neo4j_matcher import Neo4jMatcher
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            matcher = Neo4jMatcher()
            
            # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
            result1 = matcher.find_matching_schetnoe_node("")
            
            # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            long_query = "—Ç–µ—Å—Ç " * 1000
            result2 = matcher.find_matching_schetnoe_node(long_query)
            
            # –ó–∞–ø—Ä–æ—Å —Å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
            special_query = "—Ç–µ—Å—Ç!@#$%^&*()_+{}|:<>?[]\\;'\",./"
            result3 = matcher.find_matching_schetnoe_node(special_query)
            
            logger.info("–¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–æ–π–¥–µ–Ω—ã")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: {e}")
            return False
    
    def test_graceful_shutdown(self) -> bool:
        """–¢–µ—Å—Ç graceful shutdown —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Dashboard —Å–µ—Ä–≤–µ—Ä
            if self.dashboard_process:
                self.dashboard_process.terminate()
                try:
                    self.dashboard_process.wait(timeout=10)
                    logger.info("Dashboard —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                except subprocess.TimeoutExpired:
                    self.dashboard_process.kill()
                    logger.warning("Dashboard —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
                self.dashboard_process = None
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ graceful shutdown: {e}")
            return False
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
            if self.dashboard_process:
                self.dashboard_process.terminate()
                try:
                    self.dashboard_process.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    self.dashboard_process.kill()
            
            if self.bot_process:
                self.bot_process.terminate()
                try:
                    self.bot_process.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    self.bot_process.kill()
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
    
    async def run_all_integration_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        logger.info("=" * 80)
        
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        tests = [
            ("–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã", self.test_system_startup),
            ("Neo4j –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª", self.test_neo4j_full_cycle),
            ("–û–±—Ä–∞–±–æ—Ç–∫–∞ CSV —Ñ–∞–π–ª–æ–≤", self.test_csv_processing),
            ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Tavily", self.test_tavily_integration),
            ("–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ LLM", self.test_llm_processing),
            ("–ó–∞–ø—É—Å–∫ Dashboard —Å–µ—Ä–≤–µ—Ä–∞", self.test_dashboard_server_startup),
            ("API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã Dashboard", self.test_dashboard_api_endpoints),
            ("Dashboard —Å –¥–∞–Ω–Ω—ã–º–∏ —É–∑–ª–∞", self.test_dashboard_with_node_data),
            ("–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∑–∞–ø—Ä–æ—Å–∞", self.test_full_query_cycle),
            ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", self.test_error_handling),
            ("Graceful shutdown", self.test_graceful_shutdown)
        ]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        for test_name, test_func in tests:
            self.run_test(test_name, test_func)
            time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        
        # –û—á–∏—Å—Ç–∫–∞
        self.cleanup()
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logger.info("=" * 80)
        logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        logger.info(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {self.passed_tests}/{self.total_tests}")
        logger.info(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.total_tests - self.passed_tests}/{self.total_tests}")
        
        if self.passed_tests == self.total_tests:
            logger.info("üéâ –í–°–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            return True
        else:
            logger.error("üí• –ù–ï–ö–û–¢–û–†–´–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´!")
            logger.info("\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            for test_name, result in self.test_results.items():
                status_icon = "‚úÖ" if result == "PASSED" else "‚ùå"
                logger.info(f"  {status_icon} {test_name}: {result}")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                        –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï                          ‚ïë
‚ïë                    –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º                      ‚ïë
‚ïë                         –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª E2E —Ç–µ—Å—Ç–æ–≤                             ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
""")
    
    tester = FullIntegrationTester()
    
    try:
        success = asyncio.run(tester.run_all_integration_tests())
        
        if success:
            print("\nüéâ –í—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            print("üí° –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!")
            sys.exit(0)
        else:
            print("\nüí• –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö!")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚å®Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        tester.cleanup()
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        tester.cleanup()
        sys.exit(1)

if __name__ == "__main__":
    main()