#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ query_schetnoe_nodes.py
"""

import json
from query_schetnoe_nodes import SchetnoeNodesQuery
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def test_extended_functionality():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    """
    query_handler = SchetnoeNodesQuery()
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neo4j...")
        query_handler.connect()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–≤—è–∑–µ–π
        print("\n=== –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–≤—è–∑–µ–π ===")
        relation_types = query_handler.get_unique_relation_types_from_schetnoe()
        print(f"–ù–∞–π–¥–µ–Ω–æ —Ç–∏–ø–æ–≤ —Å–≤—è–∑–µ–π: {len(relation_types)}")
        print(f"–¢–∏–ø—ã —Å–≤—è–∑–µ–π: {relation_types}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–æ–∫
        print("\n=== –¢–µ—Å—Ç 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–æ–∫ –∏–∑ —Ç–∏–ø–æ–≤ —Å–≤—è–∑–µ–π ===")
        labels = query_handler.extract_labels_from_relation_types(relation_types)
        print(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ –º–µ—Ç–æ–∫: {len(labels)}")
        print(f"–ú–µ—Ç–∫–∏: {labels}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —É–∑–ª–æ–≤ –ø–æ –º–µ—Ç–∫–∞–º
        print("\n=== –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —É–∑–ª–æ–≤ –ø–æ –º–µ—Ç–∫–∞–º ===")
        additional_nodes = query_handler.get_nodes_by_labels(labels)
        print(f"–ù–∞–π–¥–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É–∑–ª–æ–≤: {len(additional_nodes)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —É–∑–ª–æ–≤ –ø–æ –∫–∞–∂–¥–æ–π –º–µ—Ç–∫–µ
        for label in labels:
            nodes_for_label = [node for node in additional_nodes if label in node['node_labels']]
            print(f"  –ú–µ—Ç–∫–∞ '{label}': {len(nodes_for_label)} —É–∑–ª–æ–≤")
            if nodes_for_label:
                example = nodes_for_label[0]
                print(f"    –ü—Ä–∏–º–µ—Ä: {example['node_name']} (ID: {example['node_id']})")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —É–∑–ª–∞–º–∏
        print("\n=== –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —É–∑–ª–∞–º–∏ ===")
        relations_between = query_handler.get_relations_between_nodes_by_labels(labels)
        print(f"–ù–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —É–∑–ª–∞–º–∏: {len(relations_between)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–≤—è–∑–µ–π
        if relations_between:
            print("–ü—Ä–∏–º–µ—Ä—ã —Å–≤—è–∑–µ–π:")
            for i, rel in enumerate(relations_between[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"  {i+1}. {rel['source_name']} -> {rel['target_name']} ({rel['relation_type']})")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print("\n=== –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ===")
        extended_data = query_handler.get_extended_schetnoe_data()
        
        metadata = extended_data['metadata']
        print(f"–£–∑–ª–æ–≤ '–°—á–µ—Ç–Ω–æ–µ': {metadata['schetnoe_nodes_count']}")
        print(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É–∑–ª–æ–≤: {metadata['additional_nodes_count']}")
        print(f"–°–≤—è–∑–µ–π –º–µ–∂–¥—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏: {metadata['relations_between_additional_count']}")
        print(f"–í—Å–µ–≥–æ –≤—Ö–æ–¥—è—â–∏—Ö —Å–≤—è–∑–µ–π –∫ '–°—á–µ—Ç–Ω–æ–µ': {metadata['total_incoming_relations']}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        print("\n=== –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===")
        with open('test_extended_results.json', 'w', encoding='utf-8') as f:
            json.dump(extended_data, f, ensure_ascii=False, indent=2)
        print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ test_extended_results.json")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        print("\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö ===")
        required_keys = ['schetnoe_nodes', 'additional_nodes', 'relations_between_additional', 'metadata']
        for key in required_keys:
            if key in extended_data:
                print(f"‚úì –ö–ª—é—á '{key}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"‚úó –ö–ª—é—á '{key}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ! ===")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
        print(f"–û—à–∏–±–∫–∞: {str(e)}")
        return False
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        query_handler.disconnect()

def test_api_compatibility():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å API
    """
    print("\n=== –¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å API ===")
    
    try:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ API
        from app import app
        with app.test_client() as client:
            response = client.get('/graph_data')
            
            if response.status_code == 200:
                data = response.get_json()
                print(f"‚úì API –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ")
                print(f"  –£–∑–ª–æ–≤: {len(data.get('nodes', []))}")
                print(f"  –°–≤—è–∑–µ–π: {len(data.get('edges', []))}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                if 'metadata' in data:
                    print(f"‚úì –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                    metadata = data['metadata']
                    print(f"  –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏: {metadata.get('discovered_labels', [])}")
                else:
                    print(f"‚úó –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                
                return True
            else:
                print(f"‚úó API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.status_code}")
                return False
                
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: {str(e)}")
        return False

if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    success1 = test_extended_functionality()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å API
    success2 = test_api_compatibility()
    
    if success1 and success2:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")