#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π
"""
import asyncio
import sys
import time
import logging
import threading
import subprocess
import requests
import psutil
import json
import statistics
from pathlib import Path
from typing import Dict, Any, List, Tuple
from concurrent.futures import ThreadPoolExecutor, as_completed
import multiprocessing
from dataclasses import dataclass
import gc

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('performance_tests.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger('performance_test')

@dataclass
class PerformanceMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    operation: str
    duration: float
    memory_usage: float
    cpu_usage: float
    success: bool
    error_message: str = ""

class PerformanceTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.metrics: List[PerformanceMetrics] = []
        self.dashboard_process = None
        self.test_queries = [
            "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤",
            "—á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π",
            "–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
            "–≤—ã—Å—à–∏–µ —É—á–µ–±–Ω—ã–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è",
            "–Ω–∞—É—á–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
            "–∞—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞ –∏ –¥–æ–∫—Ç–æ—Ä–∞–Ω—Ç—É—Ä–∞",
            "–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ",
            "—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è",
            "—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            "–¥–∏–Ω–∞–º–∏–∫–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π"
        ]
    
    def measure_performance(self, operation_name: str, func, *args, **kwargs) -> PerformanceMetrics:
        """–ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
        process = psutil.Process()
        initial_memory = process.memory_info().rss / 1024 / 1024  # MB
        initial_cpu = process.cpu_percent()
        
        start_time = time.time()
        success = True
        error_message = ""
        
        try:
            if asyncio.iscoroutinefunction(func):
                result = asyncio.run(func(*args, **kwargs))
            else:
                result = func(*args, **kwargs)
        except Exception as e:
            success = False
            error_message = str(e)
            result = None
        
        end_time = time.time()
        duration = end_time - start_time
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        final_memory = process.memory_info().rss / 1024 / 1024  # MB
        final_cpu = process.cpu_percent()
        
        memory_usage = final_memory - initial_memory
        cpu_usage = max(final_cpu - initial_cpu, 0)
        
        metrics = PerformanceMetrics(
            operation=operation_name,
            duration=duration,
            memory_usage=memory_usage,
            cpu_usage=cpu_usage,
            success=success,
            error_message=error_message
        )
        
        self.metrics.append(metrics)
        return metrics
    
    def test_neo4j_query_performance(self) -> bool:
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Neo4j"""
        try:
            from tg_bot.neo4j_matcher import Neo4jMatcher
            
            logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Neo4j –∑–∞–ø—Ä–æ—Å–æ–≤...")
            
            matcher = Neo4jMatcher()
            durations = []
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            for i, query in enumerate(self.test_queries):
                metrics = self.measure_performance(
                    f"neo4j_query_{i+1}",
                    matcher.find_matching_nodes,
                    query
                )
                durations.append(metrics.duration)
                
                if metrics.success:
                    logger.info(f"  –ó–∞–ø—Ä–æ—Å {i+1}: {metrics.duration:.3f}s, –ø–∞–º—è—Ç—å: {metrics.memory_usage:.1f}MB")
                else:
                    logger.error(f"  –ó–∞–ø—Ä–æ—Å {i+1}: –û–®–ò–ë–ö–ê - {metrics.error_message}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if durations:
                avg_duration = statistics.mean(durations)
                max_duration = max(durations)
                min_duration = min(durations)
                
                logger.info(f"üìä Neo4j –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
                logger.info(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_duration:.3f}s")
                logger.info(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {max_duration:.3f}s")
                logger.info(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {min_duration:.3f}s")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—ã—Å—Ç—Ä–æ
                if avg_duration > 5.0:  # 5 —Å–µ–∫—É–Ω–¥ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø—Ä–∏–µ–º–ª–µ–º–æ–µ –≤—Ä–µ–º—è
                    logger.warning("‚ö†Ô∏è Neo4j –∑–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –º–µ–¥–ª–µ–Ω–Ω–æ")
                    return False
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Neo4j: {e}")
            return False
    
    def test_csv_processing_performance(self) -> bool:
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ CSV"""
        try:
            from tg_bot.excel_reader import ExcelReader
            from tg_bot.config import TABLES_CSV_PATH_2124, TABLES_CSV_PATH_1620
            
            logger.info("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ CSV...")
            
            if not Path(TABLES_CSV_PATH_2124).exists():
                logger.warning("CSV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
                return True
            
            reader = ExcelReader()
            durations = []
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É CSV –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            for i, query in enumerate(self.test_queries[:5]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è CSV
                metrics = self.measure_performance(
                    f"csv_processing_{i+1}",
                    reader.search_data,
                    query,
                    TABLES_CSV_PATH_2124
                )
                durations.append(metrics.duration)
                
                if metrics.success:
                    logger.info(f"  CSV –∑–∞–ø—Ä–æ—Å {i+1}: {metrics.duration:.3f}s, –ø–∞–º—è—Ç—å: {metrics.memory_usage:.1f}MB")
                else:
                    logger.error(f"  CSV –∑–∞–ø—Ä–æ—Å {i+1}: –û–®–ò–ë–ö–ê - {metrics.error_message}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if durations:
                avg_duration = statistics.mean(durations)
                logger.info(f"üìä CSV –æ–±—Ä–∞–±–æ—Ç–∫–∞ - —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_duration:.3f}s")
                
                if avg_duration > 10.0:  # 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è CSV
                    logger.warning("‚ö†Ô∏è CSV –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–µ–¥–ª–µ–Ω–Ω–æ")
                    return False
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ CSV: {e}")
            return False
    
    def test_dashboard_response_time(self) -> bool:
        """–¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞ Dashboard —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            logger.info("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Dashboard —Å–µ—Ä–≤–µ—Ä–∞...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Dashboard —Å–µ—Ä–≤–µ—Ä
            self.dashboard_process = subprocess.Popen([
                sys.executable, 'dashboard_server.py'
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
            time.sleep(5)
            
            base_url = 'http://localhost:5001'
            endpoints = [
                '/',
                '/api/status'
            ]
            
            response_times = []
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
            for endpoint in endpoints:
                for i in range(5):  # 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –∫–∞–∂–¥–æ–º—É —ç–Ω–¥–ø–æ–∏–Ω—Ç—É
                    start_time = time.time()
                    try:
                        response = requests.get(f"{base_url}{endpoint}", timeout=10)
                        end_time = time.time()
                        
                        response_time = end_time - start_time
                        response_times.append(response_time)
                        
                        logger.info(f"  {endpoint} –∑–∞–ø—Ä–æ—Å {i+1}: {response_time:.3f}s, –∫–æ–¥: {response.status_code}")
                        
                    except requests.exceptions.RequestException as e:
                        logger.error(f"  {endpoint} –∑–∞–ø—Ä–æ—Å {i+1}: –û–®–ò–ë–ö–ê - {e}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if response_times:
                avg_response_time = statistics.mean(response_times)
                max_response_time = max(response_times)
                
                logger.info(f"üìä Dashboard –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
                logger.info(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {avg_response_time:.3f}s")
                logger.info(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {max_response_time:.3f}s")
                
                if avg_response_time > 2.0:  # 2 —Å–µ–∫—É–Ω–¥—ã –º–∞–∫—Å–∏–º—É–º –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                    logger.warning("‚ö†Ô∏è Dashboard –æ—Ç–≤–µ—á–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ")
                    return False
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Dashboard: {e}")
            return False
    
    def test_concurrent_requests(self) -> bool:
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö"""
        try:
            logger.info("‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö...")
            
            from tg_bot.neo4j_matcher import Neo4jMatcher
            
            def single_query(query_id: int, query: str) -> Tuple[int, float, bool]:
                """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
                start_time = time.time()
                try:
                    matcher = Neo4jMatcher()
                    result = matcher.find_matching_nodes(query)
                    success = True
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ {query_id}: {e}")
                    success = False
                
                duration = time.time() - start_time
                return query_id, duration, success
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            num_concurrent = min(5, len(self.test_queries))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É
            
            with ThreadPoolExecutor(max_workers=num_concurrent) as executor:
                futures = []
                
                for i in range(num_concurrent):
                    query = self.test_queries[i % len(self.test_queries)]
                    future = executor.submit(single_query, i, query)
                    futures.append(future)
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                results = []
                for future in as_completed(futures):
                    query_id, duration, success = future.result()
                    results.append((query_id, duration, success))
                    logger.info(f"  –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å {query_id}: {duration:.3f}s, —É—Å–ø–µ—Ö: {success}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            successful_results = [duration for _, duration, success in results if success]
            
            if successful_results:
                avg_concurrent_time = statistics.mean(successful_results)
                max_concurrent_time = max(successful_results)
                success_rate = len(successful_results) / len(results) * 100
                
                logger.info(f"üìä –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:")
                logger.info(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_concurrent_time:.3f}s")
                logger.info(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {max_concurrent_time:.3f}s")
                logger.info(f"  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
                
                if success_rate < 80:  # –ú–∏–Ω–∏–º—É–º 80% —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                    logger.warning("‚ö†Ô∏è –ù–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
                    return False
                
                if avg_concurrent_time > 10.0:  # 10 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º –ø—Ä–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏
                    logger.warning("‚ö†Ô∏è –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –º–µ–¥–ª–µ–Ω–Ω–æ")
                    return False
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
            return False
    
    def test_memory_usage(self) -> bool:
        """–¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        try:
            logger.info("üíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏...")
            
            process = psutil.Process()
            initial_memory = process.memory_info().rss / 1024 / 1024  # MB
            
            logger.info(f"  –ù–∞—á–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {initial_memory:.1f}MB")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏, –ø–æ—Ç—Ä–µ–±–ª—è—é—â–∏–µ –ø–∞–º—è—Ç—å
            from tg_bot.neo4j_matcher import Neo4jMatcher
            from tg_bot.excel_reader import ExcelReader
            
            # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            matchers = []
            readers = []
            
            for i in range(10):  # –°–æ–∑–¥–∞–µ–º 10 –æ–±—ä–µ–∫—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
                try:
                    matcher = Neo4jMatcher()
                    matchers.append(matcher)
                    
                    reader = ExcelReader()
                    readers.append(reader)
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã
                    if i < len(self.test_queries):
                        matcher.find_matching_nodes(self.test_queries[i])
                    
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞ {i}: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
            peak_memory = process.memory_info().rss / 1024 / 1024  # MB
            memory_increase = peak_memory - initial_memory
            
            logger.info(f"  –ü–∏–∫–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {peak_memory:.1f}MB")
            logger.info(f"  –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_increase:.1f}MB")
            
            # –û—á–∏—â–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
            del matchers
            del readers
            gc.collect()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
            time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—á–∏—Å—Ç–∫—É
            final_memory = process.memory_info().rss / 1024 / 1024  # MB
            
            logger.info(f"  –ü–∞–º—è—Ç—å –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {final_memory:.1f}MB")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–º—è—Ç—å –Ω–µ —Ä–∞—Å—Ç–µ—Ç –Ω–µ–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ
            if memory_increase > 500:  # 500MB –º–∞–∫—Å–∏–º—É–º
                logger.warning("‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏")
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏: {e}")
            return False
    
    def test_system_resources(self) -> bool:
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            logger.info("üñ•Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤...")
            
            # CPU –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            cpu_percent = psutil.cpu_percent(interval=1)
            logger.info(f"  CPU –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {cpu_percent:.1f}%")
            
            # –ü–∞–º—è—Ç—å —Å–∏—Å—Ç–µ–º—ã
            memory = psutil.virtual_memory()
            logger.info(f"  –°–∏—Å—Ç–µ–º–Ω–∞—è –ø–∞–º—è—Ç—å: {memory.percent:.1f}% ({memory.used/1024/1024/1024:.1f}GB –∏–∑ {memory.total/1024/1024/1024:.1f}GB)")
            
            # –î–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
            disk = psutil.disk_usage('.')
            logger.info(f"  –î–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ: {disk.percent:.1f}% ({disk.used/1024/1024/1024:.1f}GB –∏–∑ {disk.total/1024/1024/1024:.1f}GB)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Ä–æ–≥–∏
            if memory.percent > 90:
                logger.warning("‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ø–∞–º—è—Ç–∏")
                return False
            
            if disk.percent > 95:
                logger.warning("‚ö†Ô∏è –ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ")
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
            return False
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
        try:
            if self.dashboard_process:
                self.dashboard_process.terminate()
                try:
                    self.dashboard_process.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    self.dashboard_process.kill()
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
    
    def generate_performance_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if not self.metrics:
            return {"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞"}
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º
        operations = {}
        for metric in self.metrics:
            op_type = metric.operation.split('_')[0]
            if op_type not in operations:
                operations[op_type] = []
            operations[op_type].append(metric)
        
        report = {
            "summary": {
                "total_operations": len(self.metrics),
                "successful_operations": sum(1 for m in self.metrics if m.success),
                "failed_operations": sum(1 for m in self.metrics if not m.success),
                "total_duration": sum(m.duration for m in self.metrics),
                "average_duration": statistics.mean([m.duration for m in self.metrics]),
                "total_memory_usage": sum(m.memory_usage for m in self.metrics)
            },
            "operations": {}
        }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–π
        for op_type, metrics in operations.items():
            durations = [m.duration for m in metrics if m.success]
            memory_usage = [m.memory_usage for m in metrics if m.success]
            
            if durations:
                report["operations"][op_type] = {
                    "count": len(metrics),
                    "success_rate": len(durations) / len(metrics) * 100,
                    "avg_duration": statistics.mean(durations),
                    "min_duration": min(durations),
                    "max_duration": max(durations),
                    "avg_memory_usage": statistics.mean(memory_usage) if memory_usage else 0
                }
        
        return report
    
    async def run_all_performance_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        logger.info("=" * 80)
        
        tests = [
            ("Neo4j –∑–∞–ø—Ä–æ—Å—ã", self.test_neo4j_query_performance),
            ("–û–±—Ä–∞–±–æ—Ç–∫–∞ CSV", self.test_csv_processing_performance),
            ("Dashboard —Å–µ—Ä–≤–µ—Ä", self.test_dashboard_response_time),
            ("–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã", self.test_concurrent_requests),
            ("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏", self.test_memory_usage),
            ("–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã", self.test_system_resources)
        ]
        
        passed_tests = 0
        total_tests = len(tests)
        
        for test_name, test_func in tests:
            logger.info(f"üß™ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {test_name}")
            
            try:
                result = test_func()
                if result:
                    logger.info(f"‚úÖ {test_name}: PASSED")
                    passed_tests += 1
                else:
                    logger.error(f"‚ùå {test_name}: FAILED")
            except Exception as e:
                logger.error(f"üí• {test_name}: ERROR - {e}")
            
            time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        
        # –û—á–∏—Å—Ç–∫–∞
        self.cleanup()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = self.generate_performance_report()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        with open('performance_report.json', 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logger.info("=" * 80)
        logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
        logger.info(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}/{total_tests}")
        logger.info(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - passed_tests}/{total_tests}")
        
        if "summary" in report:
            summary = report["summary"]
            logger.info(f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            logger.info(f"  –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {summary['total_operations']}")
            logger.info(f"  –£—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {summary['successful_operations']}")
            logger.info(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏: {summary['average_duration']:.3f}s")
            logger.info(f"  –û–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {summary['total_memory_usage']:.1f}MB")
        
        logger.info("üìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ performance_report.json")
        
        if passed_tests == total_tests:
            logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ü–†–û–ô–î–ï–ù–´!")
            return True
        else:
            logger.error("üí• –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ù–ï –ü–†–û–ô–î–ï–ù–´!")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                         –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò                     ‚ïë
‚ïë                    –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º                      ‚ïë
‚ïë                            –ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã                               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
""")
    
    tester = PerformanceTester()
    
    try:
        success = asyncio.run(tester.run_all_performance_tests())
        
        if success:
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            print("üí° –°–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ö–æ—Ä–æ—à—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!")
            sys.exit(0)
        else:
            print("\nüí• –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é!")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—á–µ—Ç –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚å®Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        tester.cleanup()
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        tester.cleanup()
        sys.exit(1)

if __name__ == "__main__":
    main()