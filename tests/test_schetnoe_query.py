#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã query_schetnoe_nodes.py
"""

import json
from query_schetnoe_nodes import SchetnoeNodesQuery
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def test_connection():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neo4j
    """
    print("=== –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö NEO4J ===")
    query_handler = SchetnoeNodesQuery()
    
    try:
        query_handler.connect()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False
    finally:
        query_handler.disconnect()


def test_schetnoe_nodes_query():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å —É–∑–ª–æ–≤ "–°—á–µ—Ç–Ω–æ–µ"
    """
    print("\n=== –¢–ï–°–¢ –ó–ê–ü–†–û–°–ê –£–ó–õ–û–í '–°—á–µ—Ç–Ω–æ–µ' ===")
    query_handler = SchetnoeNodesQuery()
    
    try:
        query_handler.connect()
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —É–∑–ª–æ–≤
        nodes_only = query_handler.get_schetnoe_nodes_only()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —É–∑–ª–æ–≤ '–°—á–µ—Ç–Ω–æ–µ': {len(nodes_only)}")
        
        if nodes_only:
            print(f"–ü—Ä–∏–º–µ—Ä —É–∑–ª–∞: {nodes_only[0].get('schetnoe_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —É–∑–ª–æ–≤ —Å –≤—Ö–æ–¥—è—â–∏–º–∏ —Å–≤—è–∑—è–º–∏
        nodes_with_relations = query_handler.get_schetnoe_nodes_with_incoming_relations()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —É–∑–ª–æ–≤ —Å –≤—Ö–æ–¥—è—â–∏–º–∏ —Å–≤—è–∑—è–º–∏: {len(nodes_with_relations)}")
        
        if nodes_with_relations:
            total_relations = sum(len(node.get('incoming_relations', [])) for node in nodes_with_relations)
            print(f"–í—Å–µ–≥–æ –≤—Ö–æ–¥—è—â–∏—Ö —Å–≤—è–∑–µ–π: {total_relations}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä —É–∑–ª–∞ —Å —Å–≤—è–∑—è–º–∏
            for node in nodes_with_relations:
                if node.get('incoming_relations'):
                    print(f"–ü—Ä–∏–º–µ—Ä —É–∑–ª–∞ —Å —Å–≤—è–∑—è–º–∏: {node.get('schetnoe_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥—è—â–∏—Ö —Å–≤—è–∑–µ–π: {len(node['incoming_relations'])}")
                    print(f"  –¢–∏–ø—ã —Å–≤—è–∑–µ–π: {set(rel['relation_type'] for rel in node['incoming_relations'])}")
                    break
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False
    finally:
        query_handler.disconnect()


def test_save_results():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª
    """
    print("\n=== –¢–ï–°–¢ –°–û–•–†–ê–ù–ï–ù–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===")
    query_handler = SchetnoeNodesQuery()
    
    try:
        query_handler.connect()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        nodes_data = query_handler.get_schetnoe_nodes_only()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        test_filename = "test_schetnoe_results.json"
        query_handler.save_results_to_json(nodes_data, test_filename)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ
        with open(test_filename, 'r', encoding='utf-8') as f:
            saved_data = json.load(f)
        
        if len(saved_data) == len(nodes_data):
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {test_filename}")
            print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(saved_data)}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
        return False
    finally:
        query_handler.disconnect()


def test_cypher_query_validation():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å Cypher –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    print("\n=== –¢–ï–°–¢ –í–ê–õ–ò–î–ê–¶–ò–ò CYPHER –ó–ê–ü–†–û–°–û–í ===")
    query_handler = SchetnoeNodesQuery()
    
    try:
        query_handler.connect()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å—Ö–æ–¥—è—â–∏–µ —Å–≤—è–∑–∏ "–ü–æ–†–µ–≥–∏–æ–Ω" –Ω–µ –≤–∫–ª—é—á–∞—é—Ç—Å—è
        with query_handler.driver.session(database=query_handler.config["NEO4J_DATABASE"]) as session:
            # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–≤—è–∑–µ–π "–ü–æ–†–µ–≥–∏–æ–Ω" –æ—Ç —É–∑–ª–æ–≤ "–°—á–µ—Ç–Ω–æ–µ"
            validation_query = """
            MATCH (schetnoe:–°—á–µ—Ç–Ω–æ–µ)-[r:–ü–æ–†–µ–≥–∏–æ–Ω]->(target)
            RETURN count(r) as po_region_outgoing_count
            """
            
            result = session.run(validation_query)
            record = result.single()
            po_region_count = record['po_region_outgoing_count'] if record else 0
            
            print(f"–ù–∞–π–¥–µ–Ω–æ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–≤—è–∑–µ–π '–ü–æ–†–µ–≥–∏–æ–Ω' –æ—Ç —É–∑–ª–æ–≤ '–°—á–µ—Ç–Ω–æ–µ': {po_region_count}")
            
            if po_region_count > 0:
                print("‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏—Å—Ö–æ–¥—è—â–∏–µ —Å–≤—è–∑–∏ '–ü–æ–†–µ–≥–∏–æ–Ω', –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω—ã")
            else:
                print("‚úÖ –ò—Å—Ö–æ–¥—è—â–∏–µ —Å–≤—è–∑–∏ '–ü–æ–†–µ–≥–∏–æ–Ω' –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω—ã")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return False
    finally:
        query_handler.disconnect()


def run_all_tests():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã
    """
    print("üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –î–õ–Ø QUERY_SCHETNOE_NODES.PY")
    print("=" * 50)
    
    tests = [
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neo4j", test_connection),
        ("–ó–∞–ø—Ä–æ—Å —É–∑–ª–æ–≤ '–°—á–µ—Ç–Ω–æ–µ'", test_schetnoe_nodes_query),
        ("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", test_save_results),
        ("–í–∞–ª–∏–¥–∞—Ü–∏—è Cypher –∑–∞–ø—Ä–æ—Å–æ–≤", test_cypher_query_validation)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    
    passed = 0
    failed = 0
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
        else:
            failed += 1
    
    print(f"\n–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(results)}")
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    
    if failed == 0:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    else:
        print(f"\n‚ö†Ô∏è  {failed} —Ç–µ—Å—Ç(–æ–≤) –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")


if __name__ == "__main__":
    run_all_tests()