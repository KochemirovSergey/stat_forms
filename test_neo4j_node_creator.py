#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–¥—É–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–∑–ª–æ–≤ Neo4j
"""

import json
from neo4j_node_creator import Neo4jNodeCreator

def test_single_node():
    """
    –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ —É–∑–ª–∞
    """
    print("=== –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –û–î–ù–û–ì–û –£–ó–õ–ê ===")
    
    creator = Neo4jNodeCreator()
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ —É–∑–ª–∞
    node_config = {
        "node_name": "–¢–µ—Å—Ç_–Ω–∞—Å–µ–ª–µ–Ω–∏–µ",
        "node_label": "TestNode",
        "table_number": "2.1.1",
        "column": 3,
        "row": 5
    }
    
    try:
        creator.connect()
        node_id = creator.create_node(node_config)
        
        if node_id:
            print(f"‚úÖ –£–∑–µ–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å ID: {node_id}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–∑–ª–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        creator.disconnect()

def test_data_collection():
    """
    –¢–µ—Å—Ç —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —É–∑–ª–∞
    """
    print("\n=== –¢–ï–°–¢ –°–ë–û–†–ê –î–ê–ù–ù–´–• ===")
    
    creator = Neo4jNodeCreator()
    
    table_number = "2.1.1"
    column = 3
    row = 5
    
    print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã {table_number}, –∫–æ–ª–æ–Ω–∫–∞ {column}, —Å—Ç—Ä–æ–∫–∞ {row}")
    
    # –¢–µ—Å—Ç —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print("\n--- –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ---")
    federal_data = creator.collect_federal_data(table_number, column, row)
    print(f"–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –≥–æ–¥–∞–º: {federal_data}")
    
    # –¢–µ—Å—Ç —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print("\n--- –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ---")
    regions, regional_data = creator.collect_regional_data(table_number, column, row)
    print(f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: {len(regions)}")
    print(f"–ü–µ—Ä–≤—ã–µ 5 —Ä–µ–≥–∏–æ–Ω–æ–≤: {regions[:5]}")
    print(f"–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤—ã—Ö 3 —Ä–µ–≥–∏–æ–Ω–æ–≤: {regional_data[:3]}")

def test_batch_processing():
    """
    –¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–∑–ª–æ–≤
    """
    print("\n=== –¢–ï–°–¢ –ü–ê–ö–ï–¢–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò ===")
    
    creator = Neo4jNodeCreator()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    test_config = {
        "nodes": [
            {
                "node_name": "–¢–µ—Å—Ç_—É–∑–µ–ª_1",
                "node_label": "TestBatch",
                "table_number": "2.1.1",
                "column": 3,
                "row": 5
            },
            {
                "node_name": "–¢–µ—Å—Ç_—É–∑–µ–ª_2",
                "node_label": "TestBatch",
                "table_number": "2.1.1",
                "column": 4,
                "row": 5
            }
        ]
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    test_config_path = "test_batch_config.json"
    with open(test_config_path, 'w', encoding='utf-8') as f:
        json.dump(test_config, f, ensure_ascii=False, indent=2)
    
    try:
        result = creator.process_batch(test_config_path)
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        print(f"   –£—Å–ø–µ—Ö: {result['success']}")
        print(f"   –°–æ–∑–¥–∞–Ω–æ —É–∑–ª–æ–≤: {result.get('created_nodes', 0)}")
        print(f"   –û—à–∏–±–æ–∫: {result.get('failed_nodes', 0)}")
        
        print(f"\nüìã –õ–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        for log_entry in result.get('processing_log', []):
            print(f"   {log_entry}")
            
        if result.get('created_node_ids'):
            print(f"\nüÜî –°–æ–∑–¥–∞–Ω–Ω—ã–µ —É–∑–ª—ã:")
            for node_id in result['created_node_ids']:
                print(f"   {node_id}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")

def test_connection():
    """
    –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neo4j
    """
    print("=== –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö NEO4J ===")
    
    creator = Neo4jNodeCreator()
    
    try:
        creator.connect()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neo4j —É—Å–ø–µ—à–Ω–æ")
        creator.disconnect()
        print("‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Neo4j —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ú–û–î–£–õ–Ø NEO4J NODE CREATOR")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    test_connection()
    
    # –¢–µ—Å—Ç —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    test_data_collection()
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ —É–∑–ª–∞
    test_single_node()
    
    # –¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    test_batch_processing()
    
    print("\n" + "=" * 50)
    print("üèÅ –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´")

if __name__ == "__main__":
    main()