#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º
–£–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–æ–º –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–µ–π –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
"""
import asyncio
import signal
import sys
import threading
import time
import argparse
import logging
import logging.config
from typing import Dict, Any, Optional, List
from pathlib import Path
import json
import subprocess
import psutil
from concurrent.futures import ThreadPoolExecutor
from contextlib import asynccontextmanager

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from system_config import (
    LOGGING_CONFIG, SYSTEM_COMPONENTS, HEALTH_CHECK_CONFIG, 
    SHUTDOWN_CONFIG, CLI_CONFIG, SYSTEM_INFO, load_neo4j_config,
    validate_system_config, get_system_status
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.config.dictConfig(LOGGING_CONFIG)
logger = logging.getLogger('system_coordinator')

class SystemCoordinator:
    """–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
    
    def __init__(self):
        self.components: Dict[str, Any] = {}
        self.running = False
        self.shutdown_event = threading.Event()
        self.executor = ThreadPoolExecutor(max_workers=4)
        self.health_checks_enabled = True
        
    async def check_neo4j_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neo4j"""
        try:
            from neo4j import GraphDatabase
            
            config = load_neo4j_config()
            driver = GraphDatabase.driver(
                config['NEO4J_URI'],
                auth=(config['NEO4J_USERNAME'], config['NEO4J_PASSWORD'])
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            with driver.session(database=config['NEO4J_DATABASE']) as session:
                result = session.run("RETURN 1 as test")
                test_value = result.single()['test']
                
            driver.close()
            
            if test_value == 1:
                logger.info("‚úÖ Neo4j –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                logger.error("‚ùå Neo4j –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ—É—Å–ø–µ—à–Ω–æ")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neo4j: {e}")
            return False
    
    def check_required_files(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            missing_files = []
            missing_dirs = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
            for file_path in HEALTH_CHECK_CONFIG['files']['required_files']:
                if not Path(file_path).exists():
                    missing_files.append(file_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            for dir_path in HEALTH_CHECK_CONFIG['files']['required_directories']:
                if not Path(dir_path).exists():
                    missing_dirs.append(dir_path)
            
            if missing_files:
                logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
                return False
                
            if missing_dirs:
                logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {missing_dirs}")
                return False
            
            logger.info("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞–π–¥–µ–Ω—ã")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")
            return False
    
    def check_environment(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        try:
            import os
            
            missing_vars = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            for var in HEALTH_CHECK_CONFIG['environment']['required_env_vars']:
                if not os.getenv(var):
                    missing_vars.append(var)
            
            if missing_vars:
                logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {missing_vars}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            optional_vars = HEALTH_CHECK_CONFIG['environment']['optional_env_vars']
            found_optional = [var for var in optional_vars if os.getenv(var)]
            
            logger.info(f"‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
            if found_optional:
                logger.info(f"üìã –ù–∞–π–¥–µ–Ω—ã –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {found_optional}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
            return False
    
    async def system_health_check(self) -> bool:
        """–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã...")
        
        checks = [
            ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã", validate_system_config),
            ("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã", self.check_required_files),
            ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", self.check_environment),
            ("Neo4j –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", self.check_neo4j_connection)
        ]
        
        all_passed = True
        
        for check_name, check_func in checks:
            try:
                if asyncio.iscoroutinefunction(check_func):
                    result = await check_func()
                else:
                    result = check_func()
                
                if result:
                    logger.info(f"‚úÖ {check_name}: OK")
                else:
                    logger.error(f"‚ùå {check_name}: FAILED")
                    all_passed = False
                    
            except Exception as e:
                logger.error(f"‚ùå {check_name}: ERROR - {e}")
                all_passed = False
        
        if all_passed:
            logger.info("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        else:
            logger.error("üí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        
        return all_passed
    
    async def start_telegram_bot(self) -> bool:
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        try:
            logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç
            from tg_bot.telegram_bot import main as bot_main
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –±–æ—Ç–∞
            bot_task = asyncio.create_task(bot_main())
            self.components['telegram_bot'] = {
                'task': bot_task,
                'status': 'running',
                'start_time': time.time()
            }
            
            logger.info("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}")
            return False
    
    def start_dashboard_server(self) -> bool:
        """–ó–∞–ø—É—Å–∫ Dashboard —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            logger.info("üåê –ó–∞–ø—É—Å–∫ Dashboard —Å–µ—Ä–≤–µ—Ä–∞...")
            
            def run_dashboard():
                try:
                    from dashboard_server import app, init_visualizer, init_neo4j_matcher
                    import os
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä
                    if not init_visualizer():
                        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä")
                        return False
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Neo4j –º–∞—Ç—á–µ—Ä
                    if not init_neo4j_matcher():
                        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Neo4j –º–∞—Ç—á–µ—Ä")
                        return False
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
                    config = SYSTEM_COMPONENTS['dashboard_server']
                    app.run(
                        host=config['host'],
                        port=config['port'],
                        debug=config['debug'],
                        use_reloader=False,  # –û—Ç–∫–ª—é—á–∞–µ–º reloader –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
                        threaded=True
                    )
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ Dashboard —Å–µ—Ä–≤–µ—Ä–µ: {e}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            dashboard_thread = threading.Thread(target=run_dashboard, daemon=True)
            dashboard_thread.start()
            
            self.components['dashboard_server'] = {
                'thread': dashboard_thread,
                'status': 'running',
                'start_time': time.time()
            }
            
            # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
            time.sleep(2)
            
            logger.info("‚úÖ Dashboard —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Dashboard —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False
    
    def setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        def signal_handler(signum, frame):
            logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –Ω–∞—á–∏–Ω–∞–µ–º graceful shutdown...")
            self.shutdown_event.set()
            asyncio.create_task(self.shutdown())
        
        for sig_name in SHUTDOWN_CONFIG['signals']:
            if hasattr(signal, sig_name):
                signal.signal(getattr(signal, sig_name), signal_handler)
    
    async def shutdown(self):
        """Graceful shutdown –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        if not self.running:
            return
        
        logger.info("üõë –ù–∞—á–∏–Ω–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Å–∏—Å—Ç–µ–º—ã...")
        self.running = False
        self.health_checks_enabled = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        shutdown_tasks = []
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –±–æ—Ç–∞
        if 'telegram_bot' in self.components:
            component = self.components['telegram_bot']
            if 'task' in component and not component['task'].done():
                logger.info("ü§ñ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...")
                component['task'].cancel()
                shutdown_tasks.append(component['task'])
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Dashboard —Å–µ—Ä–≤–µ—Ä
        if 'dashboard_server' in self.components:
            component = self.components['dashboard_server']
            logger.info("üåê –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Dashboard —Å–µ—Ä–≤–µ—Ä–∞...")
            component['status'] = 'stopping'
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
        if shutdown_tasks:
            try:
                await asyncio.wait_for(
                    asyncio.gather(*shutdown_tasks, return_exceptions=True),
                    timeout=SHUTDOWN_CONFIG['timeout']
                )
            except asyncio.TimeoutError:
                logger.warning("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º executor
        self.executor.shutdown(wait=True)
        
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    async def start_system(self, components: Optional[List[str]] = None):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            self.running = True
            self.setup_signal_handlers()
            
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã: {SYSTEM_INFO['name']} v{SYSTEM_INFO['version']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
            if not await self.system_health_check():
                logger.error("üí• –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É!")
                return False
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–ø—É—Å–∫–∞—Ç—å
            if components is None:
                components = list(SYSTEM_COMPONENTS.keys())
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            success = True
            
            if 'dashboard_server' in components:
                if not self.start_dashboard_server():
                    success = False
            
            if 'telegram_bot' in components:
                if not await self.start_telegram_bot():
                    success = False
            
            if not success:
                logger.error("üí• –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã!")
                await self.shutdown()
                return False
            
            logger.info("üéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã
            try:
                while self.running and not self.shutdown_event.is_set():
                    await asyncio.sleep(1)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                    if self.health_checks_enabled:
                        await self.monitor_components()
                        
            except KeyboardInterrupt:
                logger.info("‚å®Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –æ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
            
            await self.shutdown()
            return True
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
            await self.shutdown()
            return False
    
    async def monitor_components(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            for name, component in self.components.items():
                if component['status'] == 'running':
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram –±–æ—Ç–∞
                    if name == 'telegram_bot' and 'task' in component:
                        if component['task'].done():
                            logger.warning(f"‚ö†Ô∏è {name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ")
                            component['status'] = 'failed'
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Dashboard —Å–µ—Ä–≤–µ—Ä
                    elif name == 'dashboard_server' and 'thread' in component:
                        if not component['thread'].is_alive():
                            logger.warning(f"‚ö†Ô∏è {name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ")
                            component['status'] = 'failed'
                            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
    
    def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        return {
            'system_info': SYSTEM_INFO,
            'running': self.running,
            'components': {
                name: {
                    'status': comp.get('status', 'unknown'),
                    'start_time': comp.get('start_time'),
                    'uptime': time.time() - comp.get('start_time', time.time()) if comp.get('start_time') else 0
                }
                for name, comp in self.components.items()
            }
        }

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description=f"{SYSTEM_INFO['name']} v{SYSTEM_INFO['version']}"
    )
    
    parser.add_argument(
        'command',
        nargs='?',
        default=CLI_CONFIG['default_command'],
        choices=CLI_CONFIG['commands'].keys(),
        help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
    )
    
    parser.add_argument(
        '--components',
        nargs='+',
        choices=list(SYSTEM_COMPONENTS.keys()),
        help='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã'
    )
    
    parser.add_argument(
        '--debug',
        action='store_true',
        help='–í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º'
    )
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if args.debug:
        logging.getLogger().setLevel(logging.DEBUG)
    
    coordinator = SystemCoordinator()
    
    try:
        if args.command == 'start':
            await coordinator.start_system(args.components)
            
        elif args.command == 'bot':
            await coordinator.start_system(['telegram_bot'])
            
        elif args.command == 'dashboard':
            await coordinator.start_system(['dashboard_server'])
            
        elif args.command == 'check':
            success = await coordinator.system_health_check()
            sys.exit(0 if success else 1)
            
        elif args.command == 'status':
            status = coordinator.get_system_status()
            print(json.dumps(status, indent=2, ensure_ascii=False))
            
    except KeyboardInterrupt:
        logger.info("‚å®Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)