#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–∑–ª–æ–≤ Neo4j –∏–∑ batch_nodes_config.json
"""

import json
import sys
from neo4j_node_creator import Neo4jNodeCreator

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è —É–∑–ª–æ–≤ Neo4j...")
    print("=" * 50)
    
    config_file = "batch_nodes_config.json"
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        with open(config_file, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        print(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ {config_file}")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è: {len(config['nodes'])}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É–∑–ª–∞—Ö
        for i, node in enumerate(config['nodes'], 1):
            print(f"   {i}. {node['node_name']} (—Ç–∏–ø—ã: {node['node_label']})")
        
        print("\nüîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neo4j...")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Neo4jNodeCreator
        creator = Neo4jNodeCreator()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç —É–∑–ª–æ–≤
        print("‚öôÔ∏è  –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∑–ª–æ–≤...")
        result = creator.process_batch(config_file)
        
        print("\n" + "=" * 50)
        print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢ –û–ë–†–ê–ë–û–¢–ö–ò:")
        print("=" * 50)
        
        if result['success']:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ —É–∑–ª–æ–≤: {result['created_nodes']}")
            print(f"üîó –°–æ–∑–¥–∞–Ω–æ —Å–≤—è–∑–µ–π: {result['total_relationships']}")
            
            if result['created_node_ids']:
                print("\nüÜî ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —É–∑–ª–æ–≤:")
                for node_id in result['created_node_ids']:
                    print(f"   ‚Ä¢ {node_id}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–∑–ª–æ–≤")
            
        if result['failed_nodes'] > 0:
            print(f"‚ö†Ô∏è  –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: {result['failed_nodes']}")
            
        print(f"\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {result['created_nodes']}/{result['total_nodes']} —É–∑–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ")
        
        print("\nüìù –ü–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        print("-" * 30)
        for log_entry in result['processing_log']:
            print(f"   {log_entry}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Cypher –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        print("\n" + "=" * 50)
        print("üîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê:")
        print("=" * 50)
        print("–í—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–∏ –∑–∞–ø—Ä–æ—Å—ã –≤ Neo4j Browser –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        print()
        
        for node in config['nodes']:
            node_name = node['node_name']
            labels = node['node_label']
            
            print(f"// –ù–∞–π—Ç–∏ —É–∑–µ–ª '{node_name}'")
            if isinstance(labels, list):
                labels_str = ":".join(labels)
                print(f"MATCH (n:{labels_str} {{name: \"{node_name}\"}})")
            else:
                print(f"MATCH (n:{labels} {{name: \"{node_name}\"}})")
            print("RETURN n")
            print()
            
            if 'relationships' in node:
                print(f"// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑–∏ –¥–ª—è '{node_name}'")
                if isinstance(labels, list):
                    labels_str = ":".join(labels)
                    print(f"MATCH (source)-[r]->(n:{labels_str} {{name: \"{node_name}\"}})")
                else:
                    print(f"MATCH (source)-[r]->(n:{labels} {{name: \"{node_name}\"}})")
                print("RETURN source, type(r), n")
                print()
        
        print("// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        for node in config['nodes']:
            node_name = node['node_name']
            labels = node['node_label']
            
            if isinstance(labels, list):
                labels_str = ":".join(labels)
                print(f"MATCH (n:{labels_str} {{name: \"{node_name}\"}})-[:–ü–æ–†–µ–≥–∏–æ–Ω]->(region:–†–µ–≥–∏–æ–Ω)")
            else:
                print(f"MATCH (n:{labels} {{name: \"{node_name}\"}})-[:–ü–æ–†–µ–≥–∏–æ–Ω]->(region:–†–µ–≥–∏–æ–Ω)")
            print("RETURN n.name, region.name LIMIT 5")
            break  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —É–∑–ª–∞
        
        print("\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except FileNotFoundError:
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª {config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.")
        sys.exit(1)
        
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ —Ñ–∞–π–ª–µ {config_file}")
        print(f"–î–µ—Ç–∞–ª–∏: {e}")
        sys.exit(1)
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("1. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neo4j –≤ neo4j_config.json")
        print("2. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Neo4j")
        print("3. –ù–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–ø–∫–µ –ë–î/")
        sys.exit(1)

if __name__ == "__main__":
    main()